%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.2 (Build 17C205) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 531 259
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 531 259
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CBPXMP+Helvetica
%!FontType1-1.0: CBPXMP+Helvetica 1.0000.0.0000
14 dict begin/FontName /CBPXMP+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /z put
dup 34 /x put
dup 35 /T put
dup 36 /i put
dup 37 /e put
dup 38 /f put
dup 39 /p put
dup 40 /a put
dup 41 /s put
dup 42 /space put
dup 43 /F put
dup 44 /l put
dup 45 /t put
dup 46 /r put
dup 47 /I put
dup 48 /n put
dup 49 /g put
dup 50 /H put
dup 51 /o put
dup 52 /c put
dup 53 /h put
dup 54 /summation put
dup 55 /W put
dup 56 /k put
dup 57 /K put
dup 58 /m put
dup 59 /adieresis put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<


20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158







266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 31 dict dup begin
/.notdef 0 def
/space 1 def
/F 2 def
/H 3 def
/I 4 def
/K 5 def
/T 6 def
/W 7 def
/a 8 def
/c 9 def
/e 10 def
/f 11 def
/g 12 def
/h 13 def
/i 14 def
/k 15 def
/l 16 def
/m 17 def
/n 18 def
/o 19 def
/p 20 def
/r 21 def
/s 22 def
/t 23 def
/x 24 def
/z 25 def
/adieresis 26 def
/dieresis 27 def
/old_summation 28 def
/summation 29 def
/u20B8 30 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55B973E53DD63E3402312E78CA82D3D355B5C2D8C93930A9D68D8D79BA480D2C12FC5E05B6343D49DC55CAE8B343AA995C89955CDE0BB9548B89189E1C2196B0DB2FB0E817F34A8E1782919A8B8444722FD5C2BA644D8C27464AB0A75C32B94DE78452DEA8A6097D8953A8E49BF6F0C69A4E18C4AA3501C9CB182844913F1F7F57F1062BC75BCC1AA74395747C231933821B3F9B08CA7B0033928EDFFA77414AB6C7675B94DC667EDA9965F70D22F0A9D97D7FA55D68AB1E441E15E7EE833A3FBCA79365099A3FE5DD29DF5366F2E5230355CA80BCC976A8E248A975E9C65B5B6D8F7AFD7DFE4534E84D5EA58BB936A346B6F84CC66FFC0372F52E212FA1D82E775CA25F14C3E54029FD5516BF23817CA00C9D18232D10C242C578E839F0B513C2F663978461C1D685F8DEE120743DE1C209C8339E1F69CF95E17F50423F491005780D97230BF50D090FD2893A0ED18618F458E91E78367CC43FF72A08ECC72FAFA8610EE4E858E2C9E75B01E665078138B46A9841D465DB8363EE92CE9FC5EDF206184BD4BF0DE42225412C9EA6480CEB5E26689FFB784475D3B4D6B29982FE7F304E232BFCC05DF3D72E8734B51CDB1F5BC0A60470FAA2B559737FD421E79699430C8F94B8AAEBCA0347379067C760FFD7FE74AC1C56AED164BC67019701F952A0F692C985DFEBE594382F601466D0E662BAEFF17EEC983218C3F9297CDF63D95D7DD4FFE72CFB67A9562D9F9B0D6C7E6ADDAECD029C930D2ED56FA3A8BD3EC579FF5DECEA1D49160E69EC9D56336E29022707C6B05C82C1EEFA83694D2C0CCA448E5

64C0E1B7BFC984C5F2F4807FE6C0EF2913FE4D0CD53DE24BBFF1B77822FD7244829C283D3E15CD530BD9CDEF43B155D5DABD9661BAA97336B40D9440F59C17FA1FA6C4DA1D646A6DBA22416591C4FA1D0850B1EF3ECA0D5709482E7A96ED29048047965E21620693E5928217CEFD8D7302167A1241ABED2A7522BF13C2DA9F0C245CAB54A51F14155A05A91D553C94EE1F0D22B8A9DF49EA1088EA04C614C6E6AEF63B253DC7A5C6BC08C23204A0C64F659C3D0E923F9683F7EC3123A1CBAD05ABB33ED577238F4B5D44A0045DE7E462CC8990815C144885CD4844DB421D427E403E53A5441036782547D3C6DF13366DB590C196254F855D346A38881E2974CA4CCC2EF3C6A1AC7C4727B14184CC4D31BBABCE0A15696C29B3DC27A9ACFD7BFB0E8E20810EC02A399B245D748046B2244F7FB49CC68AFE49A8913D018F4460A5797CB8882EDBBB980A49618265F56544D67A4BB471CD8062934047250F43DF3F6B4DF4521A29099E963FCC1E9EE81F4AC1F685D5E48A04CEBB9E7FFA2641D6EC996F4D723A7EA7584CFC409B10E060EFC7DC46F3A29CFFC5574F14906F718AA9DA13479384322E3C723C2A5974FE5825D893F0BDB688EEFB01C15523CC1F59D9A0F5FC7BC6C714C07C4008F1973459ABE281C769F2D613FC6E7CAE52930BBAFF69BF609B111D9BA1A334D000F731A98685D2CCC02689549505AF80C5BB035C2E1A7CFEBAC743522C533E25847B3AF9049F0A56A8B2822EB84CE1C3F01F7FBBA9884C25A6EC2A877AF595AC8FCA308A74D1EAD63EC30B0DB76C1F0A390BD37A50179C499132C2AE03B2074F7258A3A97141CBA204428D1F60E25F759ED687F88C4A2B5BF2A7D9A079B0B7E9F3EB77FC1CD6EBFFC21367E3A7767ACFC76037867F42DEF1603AEB506EC5901D31B5D5724E315028CFB71B60F139860FC57B7E886832C28F0671AD7DB197770BA6686BEAC18D52003036975DD1A1B7B38B34D286ABB234CD028B9588B805FCBCD868E172C8F6191DB37AC2E8C1A83D147332171F11940059970BF7829AFABE109500CDA9D2FC360902570F177429D2F783676A8E562B9BD98ED429082F9158A3F41D02ECF8B38A03D9C50148AE725A4841FE20AA5F120F8F6C0D3CFAC972A4CD105933956F576CA2F3A3C10DEBBF9F8CEBB26E6995EE1C9DAD273C4CC80FFB554FED6D9CF745E003D618478F936D766298B53351084AA51C62DC9894194C90668087BFC09066E4A346445858115C8F0996D58853F01600CC7ADEAF3BA735960F9D61A0017457FC5B4A35F910C150C8438DACC00AE44A7969D016B07129CE58605E60590F00496C197C1AA0FA0B3C418634EA22467363E200D3BCAEA9166AA83AFF40A2ED18DE988AE9CC4881EB1EE63067EFCC0FB84A6F5945CBA87627A8DC58A1FCD92E9A4C87590C3ABF9972BB311E1F885F0680
4D2F523CE73BE73B6D64B1278E80119547F7DB5722E70D5FAC15E9EE57E4462F095D29E692AA3E437ECB53EF20DA52AFD7E74B68BD8D5E1CB99A05E4209FB780FD13CFA6A3699561BBAB87A303548741A25AAB2E3AD7FE6D56A891B04D85A09E02D43AD83213CF6F42245418A456E3020237FA22585F2A475B5BD20AB7BCC8A43CE11913150C78D1A2745A457178AA43BAD21AC15908D5F2974F153F7EC87F6FD866F6450621812E06E857846B500B9FDA3FB07A27C9FA7FE8E0B6BF9E079DFE7DFE4BA95ABD349155B699C21564F9337749FD52F440AB880659A28A2A5BAF1C1967C270A1170F2FDA34B863909AAE6045B5F19FD3BF0F0CC27616AFF8DA91EBC332D19145FFA1BCEBF8B248338F9D36C1C7D2DBA1A0C3364A4E73947801DF5147C7FEAB8BAD9D4B1FE6B6B1A0A4506678B378FCF656DE0A7681A213F436B39A9FD9D69B53A8299FF45AD386408A8996EE960A2E699B03BDC025BD8ABDD698C34E2A977723B943ED17531586EDC1D437D71820315920B1C4723752797289A5F57B74CB524B2B4068E5FFF93CD40800823B76B975571A9F0CDCB6B3673EF095C5829179F67BE0D4C4C02D6CB22B9D3C4F7F46AD798E245AEEC660C0136B615238FD48ADE9CE297F9A6369782EE024AF2C795E8812D1DC5C01DD625097838B0A07811A9BCAC44D465D6E45D586C18B530A8886B3E48F98A48FFC0222E1D1DF16BE91CE4C89C0FA7C8931CA9F4C398C3A148BDD134A4E8903546726B2D801E9873DDA1C092A9197B044B79856F3E125D9982AA0D6C339505AC09791D7A1CF559D2EBFD907E86284EFB14BC6B22F7ACA6DE572CB4D363A620D55C863DB375BF43EFD6AE684F937E8179DC390CD8F7AF8EC2EDF013FEE31089E0E3D17CE4D6D51164A88859A861BDCA3B5B8F9FDE847D35821FD22DE894D4E5BA0B49B18CB22704FFE44482CDB463D828E1C28D7F57AD19B43D8D13245392DC6AF34807AD8864D6740283FC406B6C6309FD4D989908CF4934C0CB83D9D85EF2A9CCEB4019954998A27E009336217A8142C3FB5619E7BA9C5106412377CD526BB8444D5F4076D44E362FC705F816066BC954E21F92F126B7E028F39D4E24F5907A78400A36EF63CD818FAA7EE2ACFCA4B1A63B3888FA907C8242569487B268549ED59C14E22620B602AD2F9B57E167227D35C1F9CC88D09BB410F8739FDC9CB9473A5E8A359AB5431765852DF5A5AF388BB499C4FFE90D745389E52525011DB7D98D72C6E382C1E791B9A65B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CBPXMP+Helvetica cguidfix
/F1.1/CBPXMP+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 530.5592 258.59921 rc
1 0 0 -1 -14.67428 367.08304 cm
15.186227 151.54765 m
99.259659 151.54765 l
99.259659 235.62109 l
15.186227 235.62109 l
h
15.186227 151.54765 m
S
15.17428 281.84119 m
99.247711 281.84119 l
99.247711 365.91461 l
15.17428 365.91461 l
h
15.17428 281.84119 m
S
76.322365 297.67599 m
62.468117 287.95831 43.580524 291.6362 34.135754 305.89075 c
24.690979 320.14532 28.265568 339.57864 42.11982 349.29633 c
51.798752 356.08536 64.410286 356.53946 74.526825 350.46326 c
S
76.388557 297.52383 m
72.701599 290.60239 l
S
76.129341 298.10709 m
69.531937 298.69547 l
S
0 i
1.5291405 0 0 -1.5291405 -33.995079 454.19806 cm
/F1.1[ 12 0 0 -12 0 0]sf
41.513554 175.63495 m
(!)s
1.5291405 0 0 -1.5291405 -45.360302 467.43439 cm
62.992203 200.64973 m
(")s
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
165.07484 173.30804 m
270.67215 173.30804 l
270.67215 215.54457 l
165.07484 215.54457 l
h
165.07484 173.30804 m
S
0 i
1.5291405 0 0 -1.5291405 -104.05984 458.39084 cm
173.92596 183.55873 m
(#$%&'\(\)\)*)[ 6.890625 2.666016 6.673828 3.333984 6.673828 6.673828 6.000000 6.000000 0.000000 ] xS
173.92596 197.55873 m
(+$,-%.)[ 7.330078 2.666016 2.666016 3.333984 6.673828 0.000000 ] xS
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
161.3849 298.36423 m
266.98221 298.36423 l
266.98221 340.60077 l
161.3849 340.60077 l
h
161.3849 298.36423 m
S
0 i
1.5291405 0 0 -1.5291405 -102.10735 529.91351 cm
170.23602 318.72635 m
(/0-%1.$%.%0)[ 3.333984 6.673828 3.333984 6.673828 6.673828 3.996094 2.666016 6.673828 3.996094 6.673828 0.000000 ] xS
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
144.69427 149.47496 m
425.24078 149.47496 l
425.24078 366.58304 l
144.69427 366.58304 l
h
144.69427 149.47496 m
S
294.84421 298.69894 m
400.44153 298.69894 l
400.44153 340.93546 l
294.84421 340.93546 l
h
294.84421 298.69894 m
S
0 i
1.5291405 0 0 -1.5291405 -172.72607 524.74023 cm
303.69534 308.94962 m
(2345'\(\)\)*)[ 8.666016 6.673828 6.000000 6.673828 6.673828 6.673828 6.000000 6.000000 0.000000 ] xS
303.69534 322.94962 m
(+$,-%.)[ 7.330078 2.666016 2.666016 3.333984 6.673828 0.000000 ] xS
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
366.8385 193.49001 m
366.83981 191.14365 366.37329 188.79831 365.47418 186.63104 c
364.57745 184.46278 363.24893 182.4745 361.5889 180.81628 c
359.93066 179.15623 357.94238 177.82771 355.77414 176.93098 c
353.60687 176.03188 351.26154 175.56535 348.91516 175.56665 c
346.56879 175.56535 344.22345 176.03188 342.05618 176.93098 c
339.88794 177.82771 337.89966 179.15623 336.24142 180.81628 c
334.58139 182.4745 333.25287 184.46278 332.35614 186.63104 c
331.45703 188.79831 330.99051 191.14365 330.99182 193.49001 c
330.99051 195.83638 331.45703 198.18172 332.35614 200.34898 c
333.25287 202.51723 334.58139 204.50552 336.24142 206.16373 c
337.89966 207.82378 339.88794 209.15231 342.05618 210.04903 c
344.22345 210.94814 346.56879 211.41466 348.91516 211.41336 c
351.26154 211.41466 353.60687 210.94814 355.77414 210.04903 c
357.94238 209.15231 359.93066 207.82378 361.5889 206.16373 c
363.24893 204.50552 364.57745 202.51723 365.47418 200.34898 c
366.37329 198.18172 366.83981 195.83638 366.8385 193.49001 c
h
366.8385 193.49001 m
S
0 i
1.5291405 0 0 -1.5291405 -191.67747 463.18225 cm
339.51077 192.61378 m
(6)s
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
31.379585 170.28261 m
31.379585 212.4176 l
73.150208 212.4176 l
S
102.13519 191.38644 m
129.12093 191.38644 l
129.12093 189.17427 l
140.68625 192.86124 l
129.12093 196.54819 l
129.12093 194.33601 l
102.13519 194.33601 l
h
102.13519 191.38644 m
S
102.39203 321.25745 m
129.37778 321.25745 l
129.37778 319.04529 l
140.9431 322.73224 l
129.37778 326.41922 l
129.37778 324.20703 l
102.39203 324.20703 l
h
102.39203 321.25745 m
S
145.4917 193.47418 m
158.24031 193.47418 l
158.24031 193.16597 l
163.70399 193.67966 l
158.24031 194.19336 l
158.24031 193.88513 l
145.4917 193.88513 l
h
145.4917 193.47418 m
S
271.77719 192.54922 m
312.75757 192.54922 l
312.75757 191.83693 l
330.32059 193.02409 l
312.75757 194.21127 l
312.75757 193.49896 l
271.77719 193.49896 l
h
271.77719 192.54922 m
S
146.44144 323.57266 m
155.80115 323.57266 l
155.80115 323.00552 l
159.81245 323.95078 l
155.80115 324.89603 l
155.80115 324.32889 l
146.44144 324.32889 l
h
146.44144 323.57266 m
S
269.74332 320.8053 m
284.11008 320.8053 l
284.11008 319.95322 l
290.26724 321.37335 l
284.11008 322.79346 l
284.11008 321.94141 l
269.74332 321.94141 l
h
269.74332 320.8053 m
S
349.10022 237.7637 m
347.74283 237.7637 l
350.00516 212.18166 l
352.26752 237.7637 l
350.91013 237.7637 l
350.91013 297.45514 l
349.10022 297.45514 l
h
349.10022 237.7637 m
S
368.38184 192.12035 m
407.91339 192.12035 l
407.91339 191.46359 l
424.8555 192.55818 l
407.91339 193.65277 l
407.91339 192.99602 l
368.38184 192.99602 l
h
368.38184 192.12035 m
S
427.31348 192.38019 m
466.84503 192.38019 l
466.84503 191.72343 l
483.78714 192.81802 l
466.84503 193.91261 l
466.84503 193.25586 l
427.31348 193.25586 l
h
427.31348 192.38019 m
S
0 i
1.5291405 0 0 -1.5291405 -246.7473 453.28937 cm
443.5849 173.91765 m
(7$08%,)[ 11.326172 2.666016 6.673828 6.000000 6.673828 0.000000 ] xS
1.5291405 0 0 -1.5291405 -94.189934 424.48624 cm
155.27324 119.48383 m
(93:',%:%0-;.*+$,-%.)[ 8.003906 6.673828 9.996094 6.673828 2.666016 6.673828 9.996094 6.673828 6.673828 3.333984 6.673828 3.996094 3.333984 7.330078 2.666016 2.666016 3.333984 6.673828 0.000000 ] xS
0.60000002 i
1 0 0 -1 -14.67428 367.08304 cm
31.298946 170.37669 m
27.698597 175.18811 l
S
31.336279 170.27066 m
35.151665 175.37477 l
S
72.808243 211.9054 m
67.695175 208.60818 l
S
72.706696 212.99252 m
68.08194 216.35693 l
S
ep
end
%%Trailer
%%EOF
